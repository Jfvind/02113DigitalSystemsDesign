[
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemory:Memory_64/ramsSpWf:RamSpWf",
    "index":0.3192019950124688
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_64",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferMemory:Memory_64",
    "index":0.32169576059850374
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|RamSpWf_1",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemory:Memory_64/ramsSpWf:RamSpWf",
    "index":0.32418952618453867
  },
  {
    "class":"firrtl.transforms.DedupedResult",
    "original":"~Top|Memory_65",
    "duplicate":"~Top|Top/gameTop:GameTop/graphicEngineVGA:GraphicEngineVGA/backBufferShadowMemory:Memory_64",
    "index":0.3266832917705736
  },
  {
    "class":"firrtl.EmitCircuitAnnotation",
    "emitter":"firrtl.VerilogEmitter"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_194",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_193",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_192",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_191",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_190",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_189",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_188",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_187",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_186",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_185",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_184",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_183",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_182",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_181",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_180",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_179",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_178",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_177",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_176",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_175",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_174",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_173",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_172",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_171",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_170",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_169",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_168",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_167",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_166",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_165",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_164",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_163",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_162",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_161",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_160",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_159",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_158",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_157",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_156",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_155",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_154",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_153",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_152",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_151",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_150",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_149",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_148",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_147",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_146",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_145",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_144",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_143",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_142",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_141",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_140",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_139",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_138",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_137",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_136",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_135",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_134",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_133",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_132",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_131",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_130",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_129",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_128",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_127",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_126",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_125",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_124",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_123",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_122",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_121",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_120",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_119",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_118",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_117",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_116",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_115",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_114",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_113",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_112",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_111",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_110",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_109",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_108",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_107",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_106",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_105",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_104",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_103",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_102",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_101",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_100",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_99",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_98",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_97",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_96",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_95",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_94",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_93",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_92",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_91",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_90",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_89",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_88",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_87",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_86",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_85",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_84",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_83",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_82",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_81",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_80",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_79",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_78",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_77",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_76",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_75",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_74",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_73",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_72",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_71",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_70",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_69",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_68",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_67",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_66",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_65",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_64",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamSpWf",
    "name":"RamSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8;\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_63",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_62",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_61",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_60",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_59",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_58",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_57",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_56",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_55",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_54",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_53",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_52",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_51",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_50",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_49",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_48",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_47",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_46",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_45",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_44",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_43",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_42",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_41",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_40",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_39",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_38",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_37",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_36",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_35",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_34",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_33",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_32",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_31",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_30",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_29",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_28",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_27",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_26",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_25",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_24",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_23",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_22",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_21",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_20",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_19",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_18",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_17",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_16",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_15",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_14",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_13",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_12",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_11",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_10",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_9",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_8",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_7",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_6",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_5",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_4",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_3",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_2",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf_1",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"Top.RamInitSpWf",
    "name":"RamInitSpWf.v",
    "text":"//////////////////////////////////////////////////////////////////////////////\r\n// Authors: Luca Pezzarossa\r\n// Copyright: Technical University of Denmark - 2025\r\n// Comments:\r\n// Single-Port Block RAM Write-First Mode with initialization form MEM file\r\n// (recommended template from AMD/Xilinx)\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n`timescale 1ns / 1ps\r\n\r\nmodule RamInitSpWf ( clk,\r\n                    we,\r\n                    en,\r\n                    addr,\r\n                    di,\r\n                    dout);\r\n\r\n    parameter\r\n              ADDR_WIDTH = 8,\r\n              DATA_WIDTH = 8,\r\n              LOAD_FILE = \"\";\r\n\r\n    input clk;\r\n    input we;\r\n    input en;\r\n    input [ADDR_WIDTH-1:0] addr;\r\n    input [DATA_WIDTH-1:0] di;\r\n    output [DATA_WIDTH-1:0] dout;\r\n\r\n    reg [DATA_WIDTH-1:0] RAM [(2**ADDR_WIDTH)-1:0];\r\n    reg [DATA_WIDTH-1:0] dout;\r\n\r\n    initial begin\r\n        $readmemb(LOAD_FILE, RAM);\r\n    end\r\n\r\n    always @(posedge clk)\r\n        begin\r\n        if (en)\r\n            begin\r\n                if (we)\r\n                    begin\r\n                    RAM[addr] <= di;\r\n                    dout <= di;\r\n                    end\r\n                else\r\n                    dout <= RAM[addr];\r\n            end\r\n        end\r\nendmodule\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n// End of file\r\n//////////////////////////////////////////////////////////////////////////////\r\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxTargetDirAnno",
    "targetDir":"."
  }
]